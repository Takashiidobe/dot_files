#!/usr/bin/env bash
set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)


usage() {
  cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-h]

Generate a binary that opens up a specific website.

Available options:

-h, --help      Print this help and exit
-v, --verbose   Print script debug info
-b, --binary    Name of the binary 
-u, --url       Name of the website the binary will open
EOF
  exit
}

cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

msg() {
  echo >&2 -e "${1-}"
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

parse_params() {
  while :; do
    case "${1-}" in
      -h | --help) usage ;;
      -v | --verbose) set -x ;;
      -b | --binary) 
        binary="${2-}"
        shift
        ;;
      -u | --url) 
        url="${2-}" 
        shift
        ;;
      -?*) die "Unknown option: $1" ;;
      *) break ;;
    esac
    shift
  done

  args=("$@")

  # check required params and arguments
  [[ -z "${binary-}" ]] && die "Missing required parameter: -b or --binary"
  [[ -z "${url-}" ]] && die "Missing required parameter: -u or --url"
  [[ $(which $binary) ]] && die "This binary exists, please provide a different name not to override it."

  return 0
}

parse_params "$@"
setup_colors

###### script logic here ########
template=$(cat << EOF
#!/usr/bin/env sh
set -euf -o pipefail

open "$url"

EOF
)

echo "$template" > "$HOME/Desktop/monorepo/dot_files/bin/$binary"

chmod +x "$HOME/Desktop/monorepo/dot_files/bin/$binary"

(cd "$HOME/Desktop/monorepo/dot_files" && stow bin -t /usr/local/bin)
